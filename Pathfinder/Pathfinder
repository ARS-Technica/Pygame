"""
Pathfinder is a (single-player) tile placement game written in Kivy with the 
intention on one day being developed into my first mobile game.  The game is 
set on an eight-by-eight grid.  Each turn a fresh tile is dealt onto a pile of
five tile from which draw.  Each tile contains one of five terrains.  A tile
may be placed on the board adjacent to any previously laid tile on the condition
that its terrain matches the terrain of the map square upon which it is being place.
The objective the of the game is to find a path dominos-style to various treasures
randomly placed on the map grid.  At the end of the sixteen turns, the game it over.
"""


import kivy
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.gridlayout import GridLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.properties import ObjectProperty
import random

# Create the Layout
def init_game_grid():
    """
    Creates an eight by eight grid using the Kivy GridLayout.
    """
    
    # create a new GridLayout with 8 columns and 8 rows
    grid = GridLayout(cols=8, rows=8)
    # initialize some attributes for the grid
    grid.tiles = []
    grid.moves = []
    grid.score = 0
    grid.top_tiles = []
    grid.itemBeingDragged = None
    grid.touchedSquareY = None
    grid.touchedSquareX = None
    
    # return the grid object
    return grid


# Interface
"""
Creates a box layout at the top of the screen to display the score and the top three tiles.
"""



# Shuffle the tiles
def shuffle_tiles(grid):
    """
    Use the random module to generate a random permutation of the tile indices
    and then rearrange the grid.tiles list accordingly.
    """ 

    indices = list(range(64))
    random.shuffle(indices)
    new_tiles = []

    for index in indices:
        row = index // 8
        col = index % 8
        new_tiles.append(grid.tiles[row][col])

    grid.tiles = [new_tiles[i:i+8] for i in range(0, 64, 8)]


# Display the top three tiles
"""
Use a Python slice operator to get the top three tiles from the list of shuffled tiles. You can then display the top three tiles on the box layout at the top of the screen.
"""

# Drag and drop
"""
Implement the Kivy drag and drop feature to enable the player to drag and drop the tiles onto the grid.
"""

# Undo function
"""
Implement an undo function to allow the player to undo their moves.
"""

# Scoring
def init_score_board():
    """
    Create a scoring system for the game. The score should increase every time the player places a tile on the grid.
    
    This function initializes a BoxLayout with a horizontal orientation and a
    fixed height of 50. It also creates two ObjectProperty attributes, score
    and top_tiles, which are set to None. The function then returns the
    initialized score board.
    """
    # Create a new BoxLayout to hold the score and top tiles labels
    score_board = BoxLayout(orientation="horizontal", 
                            size_hint=(1, None),
                            height=50)
    # Create ObjectProperty instances for the score and top tiles labels
    score = ObjectProperty(None)
    top_tiles = ObjectProperty(None)
    
    # Return the score board object
    return score_board
    
   
# End of game
"""
Implements an end game function to determine when the game is over. 
The game can be over when all tiles have been placed on the grid or when the player has used no further moves.
"""

# Sound effects and animations
"""
Adds sound effects and animations to make the game more engaging and interactive.
"""

# Menu
"""
Create a new window with player options
"""

# New Game
# High Scores
# Rules
# Sound
# Quit

# Set the top_tiles and score
def init_tile_game():
    """
    This function calls init_game_grid() to initialize the game grid and
    init_score_board() to initialize the score board. It then uses Kivy's Builder
    to load a string that defines the layout of the score board. The function
    sets the top_tiles and score attributes of the game grid to the top_tiles
    and score properties of the score board, respectively. Finally, the function
    creates a BoxLayout with a vertical orientation that contains the score board
    and the game grid, and returns the layout.
    """
    # Create a new game grid
    game_grid = init_game_grid()
    # Load the score board UI definition from a string
    score_board = Builder.load_string('''
        BoxLayout:
            orientation: "horizontal"
            size_hint: 1, None
            height: 50
            Label:
                id: score
                text: "Score: 0"
            Label:
                id: top_tiles
                text: "Top Tiles: "
        ''')
    
    # Set the top_tiles and score
    game_grid.top_tiles = score_board.ids.top_tiles
    game_grid.score = score_board.ids.score
    layout = BoxLayout(orientation="vertical", spacing=10, 
                       size_hint=(1, 1),
                       pos_hint={'center_x': .5, 'center_y': .5},
                       children=[score_board, game_grid])

    return layout


# Execute Code
def main():
    """
    This function calls init_tile_game() to create the game layout and then
    runs the TileGame() application using Kivy's run() function.
    """

    game = init_tile_game()
    TileGame().run()


if __name__ == '__main__':
    main()

 
